const mongoose = require('mongoose');
const chalk = require('chalk');
const Malicious = require('./schemas/maliciousSchema');
const MaliciousArray = require('./schemas/maliciousArraySchema');
const package = require('./package.json');

mongoose.connect('mongodb+srv://maliciousDB:whNBy2f87Vpg4xfH@spa.cnnqq.mongodb.net/myFirstDatabase?retryWrites=true&w=majority', {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(async () => {
    console.log(chalk.greenBright('[spaDB]: Conectado a MongoDB correctamente.'));
    console.log(chalk.greenBright(`
     __  __       _ _      _                 ____  ____  
    |  \\/  | __ _| (_) ___(_) ___  _   _ ___|  _ \\| __ ) 
    | |\\\/| |/ _\` | | |/ __| |/ _ \\| | | / __| | | |  _ \\ 
    | |  | | (_| | | | (__| | (_) | |_| \\__ \\ |_| | |_) |
    |_|  |_|\\__,_|_|_|\\___|_|\\___/ \\__,_|___/____/|____/         v${package.version}`));

}).catch(e => console.log(chalk.red(`[spaDB Error]: ${e}`)));

// Aquí empiezan las funciones:

async function findElementByID(userID) {
    if (!userID) return console.log(chalk.red('[spaDB Error]: No se escribió la id del usuario.'));
    const user = await Malicious.findOne({ id: userID });
    if (user) return user; else return false;
}

async function findElementByReason(reason) {
    if (!reason) return console.log(chalk.red('[spaDB Error]: No se escribió la razón que buscas.'));
    const user = await Malicious.findOne({ razon: reason });
    if (user) return user; else return false;
}

async function findElementByProof(proof) {
    if (!proof) return console.log(chalk.red('[spaDB Error]: No se escribió la prueba que buscas.'));
    const validProof = await Malicious.findOne({ prueba: proof });
    if (validProof) return validProof; else return false;
}

async function getMaliciousArray() {
    const array = await MaliciousArray.findOne({});
    return array.Malicious;
}

module.exports = {
    findElementByID, findElementByReason, findElementByProof, getMaliciousArray
}